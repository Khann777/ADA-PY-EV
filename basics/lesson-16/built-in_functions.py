
#! =====================================Встроенные функции=====================================
# map, filter, reduce, zip, enumerate

# zip - соединяет несколько последовательностей (получаем генератор, в котором элементы - tuple)

list1 = [1,2,3,4,5]
list2 = ['a','b','c']
list3 = [10.1, 10.2, 20.6]

zipped = list(zip(list1, list2, list3))
# print(zipped) # <zip object at 0x100eb5cc0> / [(1, 'a', 10.1), (2, 'b', 10.2), (3, 'c', 20.6)]

# for i in zipped:
    # print(i)

# (1, 'a', 10.1)
# (2, 'b', 10.2)
# (3, 'c', 20.6)

list4 = [1,2,3,4,5]
list5 = ['a', 'b', 'c']

dict_ = dict(zip(list4, list5))
# print(dict_) # {1: 'a', 2: 'b', 3: 'c'}

#! =========================================Enumerate==========================================
# Enumerate - нумерует последовательности (по дефолту начинает с 0) ( так же как и с zip() получаем генератор)

enumerated = list(enumerate('hello'))
# print(enumerated) # <enumerate object at 0x104bedf40>

# for i in enumerated:
#     print(i)

# (0, 'h')
# (1, 'e')
# (2, 'l')
# (3, 'l')
# (4, 'o')

string = 'hello world'
# print(list(enumerate(string))) 
# [(0, 'h'), (1, 'e'), (2, 'l'), (3, 'l'), (4, 'o'), (5, ' '), (6, 'w'), (7, 'o'), (8, 'r'), (9, 'l'), (10, 'd')]

#! ============================================Map=============================================
# map - функция, которая принимает в аргументы функцию и последовательность, и применяет эту функцию к элементам последовательности (записывает в новую последовательность результат функции, в которую передаются элементы последовательности)

#? Поменяйте тип данных элементов list1 со строк на числа
list1 = ['1', '2', '3', '4', '5']
mapped_list = list(map(int, list1))
# print(mapped_list) # [1, 2, 3, 4, 5]

#? Создать новый список, элементы которого - квадраты элементов list_
list_ = [12, 13, 14, 15, 16, 17]
mapped_list = list(map(lambda x: x**2, list_))
# print(mapped_list) # [144, 169, 196, 225, 256, 289]

def to_2_degree(x):
    return x ** 2

# print(list(map(to_2_degree, list_))) # [144, 169, 196, 225, 256, 289]

#! ==========================================Filter============================================
# filter - возвращает генератор с элементами, прошедшими фильтр (какое-то условие), принимает в себя: 1) функцию, 2) последовательность

#? Отфильтровать элементы списка, оставить только те, что более 0
list1 = [1, 0, -1, -23, -55, 15, 22]
filtered = list(filter(lambda x: x > 0, list1))
# print(filtered) # [1, 15, 22]

#? Отфильтровать list_, и оставить только четные числа
list_ = list(range(1,51))
filtered = list(filter(lambda x: x % 2 == 0, list_))
# print(filtered) # [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]

users = [
    {'name': 'nikita', 'age': 10},
    {'name': 'nastya', 'age': 34},
    {'name': 'tima', 'age': 19}
]

filtered_list = list(filter(lambda x: x['age']>18, users))
# print(filtered_list) # [{'name': 'nastya', 'age': 34}, {'name': 'time', 'age': 19}]

#! ==========================================Reduce============================================
from functools import reduce
# reduce - принимает функцию и последовательность, возвращает один результат (передаваеммая функция должна обязательно принимать 2 аргумента)

list1 = list(range(1, 101))
reduced = reduce(lambda x,y: x+y, list1)
# print(reduced) # 5050

string = 'hello'
res = reduce(lambda x,y: x + '%' + y, string)
# print(res) # h%e%l%l%o

